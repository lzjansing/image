<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.us.common.modules.sys.dao.UserDao">

    <sql id="userColumns">
        a.id AS "id",
        a.username AS "username",
        a.password AS "password",
        a.user_type AS "userType",
        a.focus AS "focus",
        a.valid AS "valid",
        a.create_date AS "createDate"
    </sql>

    <sql id="userJoins">
    </sql>

    <select id="get" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM user a
        <include refid="userJoins"/>
        WHERE a.id = #{id}
    </select>

    <select id="findList" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM user a
        <include refid="userJoins"/>
        <if test="role != null and role.id != null and role.id != ''">
            JOIN sys_user_role ur ON ur.user_id = a.id AND ur.role_id = #{role.id}
        </if>
        <where>
            <if test="username != null and username != ''">
                AND a.username LIKE concat('%',#{username},'%')
            </if>
            <if test="userType != null">
                AND a.user_type = #{userType}
            </if>
            <if test="valid != null">
                AND a.valid = #{valid}
            </if>
        </where>
        <if test="page !=null and page.orderBy != null and page.orderBy != ''">
            ORDER BY ${page.orderBy}
        </if>
    </select>

    <insert id="insert">
        INSERT INTO user(
        id,
        username,
        password,
        user_type,
        valid,
        create_date
        ) VALUES (
        #{id},
        #{username},
        #{password},
        #{userType},
        #{valid},
        #{createDate}
        )
    </insert>

    <update id="update">
        UPDATE user SET
        username = #{username},
        password = #{password},
        user_type = #{userType},
        focus = #{focus}
        WHERE id = #{id}
    </update>

    <update id="disable">
        UPDATE user SET
        valid = #{VALID_DISABLE}
        WHERE id = #{id}
    </update>

    <update id="enable">
        UPDATE user SET
        valid = #{VALID_ENABLE}
        WHERE id = #{id}
    </update>

    <update id="delete">
        UPDATE user SET
        valid = #{VALID_DELETE}
        WHERE id = #{id}
    </update>

    <select id="getByUsername" resultType="User">
        SELECT
        <include refid="userColumns"/>
        FROM user a
        <include refid="userJoins"/>
        WHERE a.username = #{username}
        AND valid IN (#{VALID_ENABLE},#{VALID_DISABLE})
    </select>

    <!-- 查询全部用户数目 -->
    <select id="findAllCount" resultType="long">
        SELECT
        COUNT(1)
        FROM user a
        WHERE valid IN (#{VALID_ENABLE},#{VALID_DISABLE})
    </select>

    <!-- 更新用户密码 -->
    <update id="updatePasswordById">
        UPDATE user SET
        password = #{password}
        WHERE id = #{id}
    </update>

    <!-- 删除用户和角色关联表数据 -->
    <delete id="deleteUserRole">
        DELETE FROM sys_user_role WHERE user_id = #{id}
    </delete>

    <!-- 插入用户和角色关联表数据 -->
    <insert id="insertUserRole">
        INSERT INTO sys_user_role(user_id, role_id)
        <foreach collection="roleList" item="role" separator=" union all ">
            SELECT #{id}, #{role.id}
            FROM dual
        </foreach>
    </insert>

</mapper>